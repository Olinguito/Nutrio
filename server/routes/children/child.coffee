models = require '../../models'
libs = require '../../lib'


apiSchema = libs.ApiSchemaJson

Child = models.Child
Vaccine = models.Vaccine
Measure = models.Measure

exports.list = (req, res, next) ->

  Child.paginate({}, req.page, req.rows, (err, totalPages, users, usersSize)->

    return (req.mgsError= err; next()) if err?

    res.status 200
    res.json apiSchema.multiple(users, usersSize, totalPages, req.page)

  )

exports.retrieve = (req, res, next) ->

   Child
   .findOne({ _id: req.params.id})
   .populate('contacts measuresHistory vaccinesHistory')
   .exec((err, child) ->

      return (req.mgsError= err; next()) if err?
      return (req.notFound = "Child"; next()) unless child
      res.status 200
      res.json apiSchema.one(child)
    )


exports.update = (req, res, next) ->
  Child.updateOne({ _id: req.params.id}, req.body ,(err, child) ->

    return (req.mgsError= err; next()) if err?
    return (req.notFound = "child"; next()) unless child
    res.status 200
    res.json apiSchema.one(child)
  )



exports.vaccinate=(req, res, next) -> #req._id= (autogenerated
    Vaccine.updateOne({_id: req.params._id} , {applied: true}, (err, vaccine) ->
      return (req.mgsError= err; next()) if err?
      return (req.notFound = "vaccine"; next()) unless vaccine

        res.status 200
        res.json apiSchema.one(vaccine)
    )

exports.addMeasure =(req,res, next) ->

  Child.findOne({_id: req.params.id}, (err, child)->
    return (req.mgsError= err; next()) if err?
    return (req.notFound = "child"; next()) unless child
    measure=new Measure(req.body)
    measure.save((err)->
      return (req.mgsError= err; next()) if err?

      child.addMeasure(measure);

      child.setClassification( measure.weight,  measure.size );

      child.save((err)->
        return (req.mgsError= err; next()) if err?
        res.status 200
        res.json apiSchema.one(measure)

      )
    )
  )






